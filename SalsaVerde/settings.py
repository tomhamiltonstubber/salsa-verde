"""
Django settings for salsaverde project.

Generated by 'django-admin startproject' using Django 2.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""
import logging
import os
from urllib.parse import urlparse

import sentry_sdk
from sentry_sdk.integrations.django import DjangoIntegration
from sentry_sdk.integrations.logging import LoggingIntegration
from sentry_sdk.integrations.rq import RqIntegration


def env_true(var_name, alt='FALSE'):
    return os.getenv(var_name, alt).upper() in {'1', 'TRUE'}


DJ_DIR = os.path.dirname(__file__)
BASE_DIR = os.path.dirname(DJ_DIR)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY', 'r1chysd-n#p8rb)#e*0)mt66+5*1qcmian=3$j)@^6dpj8=ck(')


DEBUG = os.getenv('DEBUG', False)
LIVE = os.getenv('LIVE')
TESTING = os.getenv('TESTING', False)

ALLOWED_HOSTS = ['*']
INTERNAL_IPS = ['127.0.0.1', 'localhost']

INSTALLED_APPS = [
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_extensions',
    'bootstrapform_jinja',
    'storages',
    'debug_toolbar',
    'django_rq',
    'SalsaVerde.company',
    'SalsaVerde.stock',
    'SalsaVerde.orders',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'debug_toolbar.middleware.DebugToolbarMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'SalsaVerde.stock.middleware.AuthRequiredMiddleware',
]
if DEBUG:
    MIDDLEWARE += [
        'SalsaVerde.common.profiling.middleware.profiling_middleware',
    ]

ROOT_URLCONF = 'SalsaVerde.urls'

_TEMPLATE_CONTEXT_PROCESSORS = (
    'django.contrib.auth.context_processors.auth',
    'django.template.context_processors.debug',
    'django.template.context_processors.media',
    'django.template.context_processors.static',
    'django.template.context_processors.tz',
    'django.template.context_processors.request',
    'django.template.context_processors.csrf',
    'django.contrib.messages.context_processors.messages',
)

TEMPLATES = [
    {
        'BACKEND': 'django_jinja.backend.Jinja2',
        'APP_DIRS': True,
        'DIRS': ['templates'],
        'OPTIONS': {'match_extension': '.jinja', 'context_processors': _TEMPLATE_CONTEXT_PROCESSORS},
    },
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {'context_processors': _TEMPLATE_CONTEXT_PROCESSORS},
    },
]

WSGI_APPLICATION = 'SalsaVerde.wsgi.application'

# Database
# https://docs.djangoproject.com/en/2.0/ref/settings/#databases

if LIVE:
    import dj_database_url

    DATABASES = {'default': dj_database_url.config()}
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql_psycopg2',
            'NAME': 'salsaverde',
            'USER': os.getenv('PGUSER', 'postgres'),
            'PASSWORD': os.getenv('PGPASSWORD', 'waffle'),
            'HOST': os.getenv('PGHOST', 'localhost'),
            'PORT': os.getenv('PGPORT', '5432'),
        }
    }


# Password validation
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},
]

LANGUAGE_CODE = 'en-gb'
TIME_ZONE = 'UTC'
USE_I18N = False
USE_TZ = True
DT_FORMAT = '%d/%m/%Y %H:%M'
DATE_FORMAT = '%d/%m/%Y'

AUTH_USER_MODEL = 'company.User'
DEFAULT_AUTO_FIELD = 'django.db.models.AutoField'

# Storage

STATIC_ROOT = 'staticfiles'
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]
STATIC_URL = '/static/'

AWS_PRIVATE_MEDIA_LOCATION = 'media/private'

if LIVE:
    AWS_ACCESS_KEY_ID = os.getenv('AWS_ACCESS_KEY_ID')
    AWS_SECRET_ACCESS_KEY = os.getenv('AWS_SECRET_ACCESS_KEY')
    AWS_STORAGE_BUCKET_NAME = 'salsa-verde'
    AWS_S3_CUSTOM_DOMAIN = '%s.s3.amazonaws.com' % AWS_STORAGE_BUCKET_NAME
    AWS_S3_OBJECT_PARAMETERS = {
        'CacheControl': 'max-age=86400',
    }
    AWS_STATIC_LOCATION = 'static'
else:
    MEDIA_ROOT = 'mediafiles'
    MEDIA_URL = '/media/'
    PUBLIC_URL = '/media/public/'


PRIVATE_FILE_STORAGE = 'stock.storage_backends.PrivateMediaStorage'


ON_HEROKU = 'DYNO' in os.environ


# =======================
#   Logging
# =======================
LOGGING = {
    'version': 1,
    'disable_existing_loggers': True,
    'filters': {
        'require_debug_false': {'()': 'django.utils.log.RequireDebugFalse'},
        'require_debug_true': {'()': 'django.utils.log.RequireDebugTrue'},
    },
    'formatters': {
        'salsa': {
            'format': '%(name)16s â¬¢ %(message)s' if ON_HEROKU else '[%(asctime)s] %(name)-16s %(message)s',
            'datefmt': '%d/%b/%Y %H:%M:%S',
        },
        'rq_console': {
            'format': '%(message).300s' if ON_HEROKU else '%(asctime)s %(message).300s',
            'datefmt': '%H:%M:%S',
        },
        'django.server': {'()': 'django.utils.log.ServerFormatter', 'format': '[%(server_time)s] %(message)s'},
    },
    'handlers': {
        'rq_console': {'level': 'INFO', 'formatter': 'rq_console', 'class': 'SalsaVerde.rq.RQHandler'},
        'debug_console': {'level': 'DEBUG', 'filters': ['require_debug_true'], 'class': 'logging.StreamHandler'},
        'null': {'class': 'logging.NullHandler'},
        'django.server': {'level': 'INFO', 'class': 'logging.StreamHandler', 'formatter': 'django.server'},
        'sv_console': {
            'level': 'DEBUG' if DEBUG else 'INFO',
            'class': 'SalsaVerde.streamhandler.StreamHandler',
            'formatter': 'salsa',
        },
    },
    'loggers': {
        'django.server': {'handlers': ['django.server'], 'level': 'INFO', 'propagate': False},
        'django': {'handlers': ['debug_console'], 'level': 'INFO'},
        'salsa': {'handlers': ['sv_console'], 'level': 'DEBUG', 'propagate': False},
        'django.security': {'handlers': ['debug_console'], 'level': 'ERROR', 'propagate': False},
        'django.security.DisallowedHost': {'handlers': ['null'], 'propagate': False},
        'sentry.errors': {'level': 'WARNING', 'handlers': ['debug_console'], 'propagate': False},
        'rq.worker': {'handlers': ['rq_console'], 'level': 'INFO'},
    },
}


sentry_logging = LoggingIntegration(level=logging.INFO, event_level=logging.WARNING)
sentry_sdk.init(
    dsn=os.getenv('SENTRY_DSN'),
    integrations=[DjangoIntegration(), RqIntegration(), sentry_logging],
)

# =======================================
# django-rq
# =======================================
redis_url = urlparse(os.getenv('REDISCLOUD_URL', 'redis://localhost:6379'))
redis_db = os.getenv('REDIS_DB', '0')
redis_connections = int(os.getenv('REDIS_CONNECTIONS', '50'))
CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': f'redis://{redis_url.hostname}:{redis_url.port}/{redis_db}',
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
            'PASSWORD': redis_url.password,
            'CONNECTION_POOL_KWARGS': {'max_connections': redis_connections},
        },
    }
}


ASYNC_RQ = env_true('ASYNC_RQ', 'TRUE')

RQ_QUEUES = {
    'default': {'USE_REDIS_CACHE': 'default', 'ASYNC': ASYNC_RQ},
}

# =======================================
# Shopify
# =======================================
SHOPIFY_API_VERSION = os.getenv('SHOPIFY_API_VERSION', '2020-07')
SHOPIFY_BASE_URL = os.getenv(
    'SHOPIFY_BASE_URL', f'https://burren-balsamics.myshopify.com/admin/api/{SHOPIFY_API_VERSION}'
)

# =======================================
# ExpressFreight
# =======================================

EF_URL = os.getenv('EF_URL', 'https://online.expressfreight.co.uk:10813/api')
EF_USERNAME = os.getenv('EF_USERNAME', 'MANUALUSER')
EF_PASSWORD = os.getenv('EF_PASSWORD')
EF_CLIENT_ID = os.getenv('EF_CLIENT_ID', 'MANUALCLIENT')
EF_CLIENT_SECRET = os.getenv('EF_CLIENT_SECRET')

# =======================================
# DHL
# =======================================

DHL_API_VERSION = os.getenv('DHL_API_VERSION', '1.1.0')
DHL_BASE_URL = os.getenv('DHL_BASE_URL', 'https://express.api.dhl.com/mydhlapi/test')


try:
    from localsettings import *  # noqa
except ImportError:
    pass
