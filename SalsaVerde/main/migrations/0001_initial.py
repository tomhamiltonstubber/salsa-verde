# Generated by Django 2.0.4 on 2018-04-21 15:01

import datetime
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Email Address')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='First name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='Last name')),
                ('last_logged_in', models.DateTimeField(default=datetime.datetime(2018, 1, 1, 0, 0), verbose_name='Last Logged in')),
                ('street', models.TextField(blank=True, null=True, verbose_name='Street Address')),
                ('town', models.CharField(blank=True, max_length=50, null=True, verbose_name='Town')),
                ('country', models.CharField(blank=True, max_length=50, null=True, verbose_name='Country')),
                ('postcode', models.CharField(blank=True, max_length=20, null=True, verbose_name='Postcode')),
                ('phone', models.CharField(blank=True, max_length=255, null=True, verbose_name='Telephone Number')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
            },
        ),
        migrations.CreateModel(
            name='Area',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Container',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('batch_code', models.CharField(max_length=25, verbose_name='Batch Code')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ContainerType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('size', models.DecimalField(decimal_places=5, max_digits=25, verbose_name='Size')),
                ('type', models.CharField(choices=[('bottle', 'Bottle'), ('cap', 'Cap'), ('other', 'Container')], max_length=255, verbose_name='Container Type')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Document',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Date Created')),
                ('type', models.CharField(blank=True, choices=[('com1', 'COM1 - Complaint Summary'), ('com2', 'COM2 - Complaint Log'), ('gl01', 'GL01 - Glass Audit'), ('gl02', 'GL02 - Glass Breakage Report'), ('int1', 'INT1 - Intake of Goods'), ('nc01', 'NC01 - Non Conformity Report'), ('pla01', 'PLA01 - Plaster Log'), ('st01', 'ST01 - Staff Health Questionnaire'), ('st02', 'ST02 - Return to Work Questionnaire'), ('st03', 'ST03 - Induction Log'), ('st04', 'ST04 - Staff Training Record'), ('sup01', 'SUP01 - Raw Materials Suppliers'), ('sup02', 'SUP02 - Packaging Suppliers'), ('sup03', 'SUP03 - Service Suppliers'), ('sup04', 'SUP04 - Supplier Self Audit'), ('tra01', 'TRA01 - Traceability'), ('vis01', 'VIS01 - Visitor Questionnaire')], max_length=6, null=True, verbose_name='Salsa Form Type')),
                ('file', models.FileField(max_length=256, null=True, upload_to='static/documents/')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Ingredient',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('batch_code', models.CharField(max_length=25, verbose_name='Batch Code')),
                ('intake_date', models.DateTimeField(verbose_name='Intake Date')),
                ('condition', models.CharField(default='Good', max_length=25, verbose_name='Condition')),
                ('status', models.CharField(default='accept', max_length=25, verbose_name='Status')),
                ('quantity', models.DecimalField(decimal_places=5, max_digits=25, verbose_name='Quantity')),
            ],
            options={
                'verbose_name': 'Ingredient',
            },
        ),
        migrations.CreateModel(
            name='IngredientType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('unit', models.CharField(choices=[('kilogram', 'kg'), ('litre', 'litre')], max_length=25, verbose_name='Units')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_of_infusion', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Date of Infusion/Sous-vide')),
                ('date_of_bottling', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Date of Infusion/Sous-vide')),
                ('date_of_best_before', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Date of Best Before')),
                ('yield_quantity', models.DecimalField(decimal_places=25, max_digits=25, verbose_name='Yield Quantity (in litres)')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ProductIngredient',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.DecimalField(decimal_places=5, max_digits=25, verbose_name='Quantity')),
                ('ingredient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.Ingredient')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.Product')),
            ],
        ),
        migrations.CreateModel(
            name='ProductType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('ingredient_types', models.ManyToManyField(related_name='product_types', to='main.IngredientType')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Supplier',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('street', models.TextField(blank=True, null=True, verbose_name='Street Address')),
                ('town', models.CharField(blank=True, max_length=50, null=True, verbose_name='Town')),
                ('country', models.CharField(blank=True, max_length=50, null=True, verbose_name='Town')),
                ('postcode', models.CharField(blank=True, max_length=20, null=True, verbose_name='Postcode')),
                ('phone', models.CharField(blank=True, max_length=255, null=True, verbose_name='Telephone Number')),
                ('email', models.EmailField(blank=True, max_length=50, null=True, verbose_name='Email')),
                ('main_contact', models.CharField(blank=True, max_length=50, null=True, verbose_name='Main Contact')),
            ],
            options={
                'verbose_name': 'Supplier',
                'verbose_name_plural': 'Suppliers',
            },
        ),
        migrations.CreateModel(
            name='YieldContainers',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.DecimalField(decimal_places=5, max_digits=25, verbose_name='Quantity')),
                ('container', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.Container')),
            ],
        ),
        migrations.CreateModel(
            name='Complaint',
            fields=[
                ('document_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='main.Document')),
                ('complaint_type', models.CharField(choices=[('bacteria', 'Bacteria'), ('packaging', 'Packaging'), ('foreign', 'Foreign Body'), ('other', 'Other')], max_length=255, verbose_name='Reason')),
                ('complainant_name', models.CharField(max_length=50, verbose_name='Complainant Name')),
                ('complainant_address', models.TextField(max_length=255, verbose_name='Complainant Address')),
                ('complainant_phone', models.CharField(blank=True, max_length=255, null=True, verbose_name='Complainant Phone')),
                ('method', models.CharField(max_length=25, verbose_name='Complainant Method')),
                ('description', models.TextField(max_length=255, verbose_name='Complainant Description')),
                ('cause', models.TextField(max_length=255, verbose_name='Complaint Cause')),
                ('corrective_action_desc', models.TextField(max_length=255, verbose_name='Corrective Action Desc')),
                ('corrective_action_date', models.DateTimeField(verbose_name='Corrective Action Taken')),
                ('complaint_reply_date', models.DateTimeField(verbose_name='Corrective Action Taken')),
            ],
            options={
                'abstract': False,
            },
            bases=('main.document',),
        ),
        migrations.CreateModel(
            name='GlassAudit',
            fields=[
                ('document_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='main.Document')),
                ('broken_containers', models.PositiveSmallIntegerField(verbose_name='Broken Containers')),
                ('action_taken', models.TextField(blank=True, default='', verbose_name='Action Taken')),
                ('audited_area', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='main.Area')),
            ],
            options={
                'abstract': False,
            },
            bases=('main.document',),
        ),
        migrations.CreateModel(
            name='GlassBreakageReport',
            fields=[
                ('document_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='main.Document')),
                ('description', models.TextField(verbose_name='Breakage Details')),
                ('area_cleared', models.BooleanField(default=True, verbose_name='Area Cleared')),
                ('breakage_area', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='main.Area')),
            ],
            options={
                'abstract': False,
            },
            bases=('main.document',),
        ),
        migrations.CreateModel(
            name='PlasterReport',
            fields=[
                ('document_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='main.Document')),
                ('plaster_check_time', models.DateTimeField(verbose_name='Plaster Check Time')),
                ('plaster_check_employee', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('recipient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='plaster_reports', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
            bases=('main.document',),
        ),
        migrations.AddField(
            model_name='product',
            name='product_ingredients',
            field=models.ManyToManyField(related_name='products', to='main.ProductIngredient'),
        ),
        migrations.AddField(
            model_name='product',
            name='product_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='products', to='main.ProductType'),
        ),
        migrations.AddField(
            model_name='product',
            name='yield_containers',
            field=models.ManyToManyField(related_name='products', to='main.YieldContainers'),
        ),
        migrations.AddField(
            model_name='ingredient',
            name='ingredient_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ingredients', to='main.IngredientType'),
        ),
        migrations.AddField(
            model_name='ingredient',
            name='intake_user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='ingredient',
            name='supplier',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ingredients', to='main.Supplier'),
        ),
        migrations.AddField(
            model_name='document',
            name='author',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='salsa_sheets', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='document',
            name='focus',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='focussed_documents', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='container',
            name='container_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.ContainerType'),
        ),
        migrations.AddField(
            model_name='glassaudit',
            name='container',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.Container'),
        ),
        migrations.AddField(
            model_name='complaint',
            name='affected_product',
            field=models.ManyToManyField(related_name='complaints', to='main.Product'),
        ),
        migrations.AddField(
            model_name='complaint',
            name='investigator',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL),
        ),
    ]
